package jw.app.rendezvousclient;

import com.google.android.gms.maps.model.LatLng;

import org.joda.time.Instant;

import java.util.ArrayList;
import java.util.NoSuchElementException;

/**
 * The group class represents a collection of contacts
 * that are rendered on the same page. Since groups are
 * not explicitly rendered on screen (their contacts are),
 * Groups refer to contacts independently of the PageObject
 * class.
 */
public class Group {

    private ArrayList<Contact> contacts;    // contacts in the group
    private String name;                    // name of the group
    private String id;                      // ids generated by the groups server
    private long created;                   // the millisecond-time the group was created

    /**
     * The Group object's constructor is directly coupled
     * with creation on the server side. It invokes a network
     * operation so should not be called on the main thread.
     */
    public Group() {
        contacts = new ArrayList<Contact>();
        // network operation to create the group
    }

    /**
     * Add a contact. This involves querying the groups server
     * for this contact's information. The request only succeeds
     * once the user accepts the request. This is only allowed if
     * the user is either an admin or has add permissions for this
     * group on the server.
     * @param c
     */
    public void addContact(Contact c) {
        // send a request to the groups server asking to add user to group
        if (!contacts.contains(c)) {
            contacts.add(c);
        }
        LatLng loc = c.getLocation(); // to be run in the background
        c.updateLocation(loc);
        c.render();
    }

    /**
     * Remove a contact. This involves querying the groups server
     * requesting that a user be removed. This is only allowed if
     * user is a group admin on the groups server.
     * @param c
     * @throws NoSuchElementException
     */
    public void removeContact(Contact c) throws NoSuchElementException {
        // send a request to the groups server to remove the user from the group
        if (!contacts.contains(c)) {
            throw new NoSuchElementException("Trying to remove a contact that doesn't exist!");
        }
        contacts.remove(c);
        c.unrender();
    }

    /**
     * Requests up to date locations of all contacts in the group that
     * are broadcasting their locations by calling getLocation().
     */
    public void queryLocations() {
        for (Contact c : contacts) {
            LatLng loc = c.getLocation(); // to be run in the background
            c.updateLocation(loc);        // updated location
            c.render();                   // re-render page object
        }
    }

    /**
     * This function issues a network operation to remove the group
     * on the server side. Note that if the last group admin or 'host'
     * issues a leaveGroup(), this issue a destroyGroup().
     */
    public void destroyGroup() {

    }

    /**
     * This function will issue a network operation informing the
     * groups server that this user should be removed from this group
     */
    public void leaveGroup() {

    }

    /**
     * This function will issue a network operation informing the
     * groups server that this user is not broadcasting his/her location
     * to other members of the group at this time.
     */
    public void unbroadcastLocations() {

    }

}
